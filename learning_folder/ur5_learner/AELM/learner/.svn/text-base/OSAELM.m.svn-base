classdef OSAELM < AELM
    %AELM Summary of this class goes here
    %   Detailed explanation goes here
    
    properties
        H = [];
        P = [];
        k = 0;
    end
    
    methods
        function l = OSAELM(modDims, spec)
            l = l@AELM(modDims, spec);
        end

        function init(l, X)
            l.init@AELM();
        end
        
        function initialLearning(l, X, Y)
            hs = l.calcHiddenStates(X);
            hn = size(l.Wout,1);
           
            l.P = eye(hn)/(hs'*hs + l.regOut*eye(hn));
            l.Wout = (Y' * hs * l.P)';
            
            l.H = hs;
            l.k = 1;
        end
        
        function train(l, X, Y)
            if l.sp(1) > 0
                l.trainOutSP(X, Y);
            else
                l.trainOut(X, Y);
            end
        end
        
        function trainOut(l, X, Y)
            if l.k == 0
                l.initialLearning(X, Y);
            else
                hs = l.calcHiddenStates(X);
                nt = size(X,1);
                l.P = l.P - (l.P*hs' / (eye(nt)+hs*l.P*hs')) * hs * l.P;
                l.Wout = (l.Wout + l.P*hs' * (Y - hs*l.Wout));
                l.k = l.k + 1;
            end
        end
        
        function trainOutSP(l, X, Y)
            % l.sp = [radius #trajs #steps]
            
            % vel. profile for sp trajs
            %fprintf('preparing contraction profile...');
            alpha = linspace(sqrt(l.sp(1)), 0, l.sp(3))';
            alpha = alpha.^2;
            alpha = [alpha; alpha(end)];
            alphaInp = []; %zeros(l.sp(4)*l.sp(2)*l.sp(3), l.outDim);
            alphaOut = [];
            for j=1:l.sp(2) % no trajs
                for k=1:l.sp(3) % traj steps
                    alphaInp = [alphaInp; alpha(k)];
                    alphaOut = [alphaOut; alpha(k+1)];
                end
            end
            alphaInp = repmat(alphaInp, 1, l.inpDim);
            alphaOut = repmat(alphaOut, 1, l.outDim);
            %fprintf('done!\n');

            r = randn(l.sp(2), l.outDim);
            rn = repmat(sqrt(sum(r.^2,2)), 1, l.outDim);
            r = repmat(r ./ rn, l.sp(3), 1);
            Xtmp = repmat(X, l.sp(2) * l.sp(3), 1);
            Ytmp = Xtmp + alphaOut .* r;
            Xtmp = Xtmp + alphaInp .* r;
            
            l.trainOut(Xtmp, Ytmp);
            %fprintf('done!\n');
        end
       
    end
    
end

