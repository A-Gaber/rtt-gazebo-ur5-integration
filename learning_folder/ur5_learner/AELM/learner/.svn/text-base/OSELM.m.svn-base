classdef OSELM < ELM
    %OSELM Summary of this class goes here
    %   Detailed explanation goes here
    
    properties
        H = [];
        P = [];
        k = 0;
    end
    
    methods
        function l = OSELM(inpDim, outDim, spec)
            l = l@ELM(inpDim, outDim, spec);
        end
        
        function reset(l)
            l.wOut = 2 * rand(l.outDim,l.hidDim) - ones(l.outDim,l.hidDim);
            l.k = 0;
            l.H = [];
            l.P = [];
        end
        
        function init(l, X, Y)
            l.init@ELM(X);
            if nargin > 2 && ~isempty(Y)
                l.initialLearning(X, Y);
            end
        end
        
        function initialLearning(l, X, Y)
            hs = l.calcHiddenStates(X);
            hn = size(l.wOut,1);
           
            l.P = eye(hn)/(hs'*hs + l.reg*eye(hn));
            l.wOut = (Y' * hs * l.P)';
            
            l.H = hs;
            l.k = 1;
        end
        
        function train(l, X, Y, w)
            if l.k == 0
                l.initialLearning(X, Y);
            else
                hs = l.calcHiddenStates(X);
                nt = size(X,1);
                
                if nargin > 3
                    W = diag(w);
                    l.P = l.P - (l.P*hs' / (eye(nt)+hs*l.P*hs')) * hs * l.P;
                    l.wOut = (l.wOut + l.P*hs'*W * (Y - hs*l.wOut));
                else
                    l.P = l.P - (l.P*hs' / (eye(nt)+hs*l.P*hs')) * hs * l.P;
                    l.wOut = (l.wOut + l.P*hs' * (Y - hs*l.wOut));
                end
                
                l.k = l.k + 1;
            end
        end
        
        function Y = apply(l, X)
            if iscell(X)
                Y = cell(length(X),1);
                for i=1:length(X)
                    Y{i} = l.apply(X{i});
                end
            else
                if size(X,1) < l.batchSize
                    H = l.calcHiddenStates(X);
                    Y = H * l.wOut;
                else
                    Y = zeros(size(X,1), l.outDim);
                    numBatches = floor(size(X,1)/l.batchSize);
                    rest = mod(size(X,1),l.batchSize);
                    for b=1:numBatches
                        H = l.calcHiddenStates(X((b-1)*l.batchSize+1:b*l.batchSize,:));
                        Y((b-1)*l.batchSize+1:b*l.batchSize,:) = H * l.wOut;
                    end
                    if rest > 0
                        H = l.calcHiddenStates(X(numBatches*l.batchSize+1:end,:));
                        Y(numBatches*l.batchSize+1:end,:) = H * l.wOut;
                    end
                end
                l.out = Y(end,:);
            end
        end
        
    end
    
end

